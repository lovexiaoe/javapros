package com.zhaoyu.structs.trees.binarysearch;

/**
 * 红黑树是一种特殊的二叉查找树，中序遍历的结果是升序的，有着所有二叉查找树的特性，
 * 它又是一种接近平衡的二叉树，又以下特性。
 * （1）每个节点或者是黑色，或者是红色。
 * （2）根节点是黑色。
 * （3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]
 * （4）如果一个节点是红色的，则它的子节点必须是黑色的。
 * （5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。
 *
 * 红黑树的时间复杂度也为O(log n)。和AVL一样。
 * 定理：一个n个节点的红黑树高度至多为2log(n+1)。
 *
 * 红黑树的基本操作有，添加和删除。
 * 旋转操作有：左旋和右旋。
 *
 * 红黑树不是严格的平衡树，而AVL是严格的平衡树。
 * 红黑树对于AVL来说，追求部分平衡，旋转次数降低，RB-tree的重新平衡最多只要3次旋转。
 * 适合有较多插入和删除的操作。如果插入和删除的情况较少，那么AVL性能还是优于红黑树。
 *
 * java中的HashMap和TreeMap都用到了红黑树。
 */
public class RBTree {
}
