package com.zhaoyu.structs.trees.binarysearch;

/**
 * 二叉搜索树（BST），又称为二叉查找树、二叉排序树。
 * 二叉搜索树是一个链表组成的二叉树结构，每个节点有key,lchild,rchild,parent。根节点的parent为null。在二叉搜索树中，
 * 1，左子树中节点小于等于父节点，父节点又小于等于右子树中节点。
 * 2，左右子树也分别为二叉搜索树。
 *
 * 中序遍历（根节点在中，即左根右）得到的顺序正好是升序。
 *
 * 查找的时间为O(h),h为树的高度。
 *
 * 后继successor和前驱predecessor：根据遍历的（中序，先序，后序）方式不同，后继和前驱表示在遍历顺序中的前一个节点和后一个节
 * 点，他们表示的节点也会不同。二叉搜索树种一般指中序遍历的前驱和后继。前驱和后继的时间复杂度也为O(h)
 *
 * 插入的时间复杂度是O(h),h为树的高度。插入总会创建一个新的叶子节点。这是BST的一个重要特性。
 *
 * 删除会引起树的集合的变化，删除操作会复杂一些。为了保持树的性质不变，需要一些额外的操作，分为3中情况：
 * 1，如果没有子节点，直接删除，父节点的孩子指针设置为null。
 * 2，如果有一个子节点，直接用子节点树替换。
 * 3，如果Z有两个子节点，找到后继节点Y（一定没有左孩子），让Y占据节点的位置。Z的左子树变为Y的左子树，Z的右子树变为Y的右子树。
 *     如果Y不是Z的右孩子，先用Y的右孩子替换Y,然后用Y替换Z。
 *
 *
 */
public class BST {

}
