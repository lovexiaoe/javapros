平衡二叉树。
叶节点的最大高度差不大于1，我们成为平衡二叉树，平衡二叉搜索树的结构保证了最大的搜索效率（lgn）。如果二叉树搜索树失去平衡性，那么查询效率会大于lgn。
二叉搜索树在插入和删除节点的时候，会损失其平衡性。那么有没有一种二叉搜索树是平衡的呢？这里就要引入旋转的概念，参考图rotate-bst.png。
二叉搜索树可以通过左旋和右旋操作（rotate）调整数的结构，但是又不会损失其二叉搜索树的特性。
由于原树的高度差最大是1，我们通过增加和删除一个节点，最大高度差为2，所以我们只要通过旋转消除一个高度差，我们的树会再次达到平衡。

AVL就是这样一个平衡二叉搜索树，同时通过旋转保持二叉搜索树的平衡性。

最简单的旋转如AVL-simple-rotation.png。旋转后树依然会达到平衡。

但是一些情况，一次旋转后，树依然达不到平衡。如AVL-simple-rotation-error.png。
这种情况是对D节点进行了增加操作，或者对C子树的节点进行了删除操作。如果我们对A进行左旋转，并不能达到树的平衡。这时，需要双旋转。
首先，我们对中间的孙子节点D进行反向的向右旋转，然后再对它进行左旋。最后达到数的平衡，如图AVL-double-rotation.png。



