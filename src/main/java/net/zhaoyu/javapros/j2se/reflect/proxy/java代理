代理可以在运行时创建一个实现了一组给定接口的新类。

在编译时无法确定需要实现哪个接口时使用。

尤其是代理类具有下列方法：
1，指定 接口所有的方法。
2，Object类中的全部方法，例如，toString,equals等。


所有代理类都覆盖了Object类中的toString,equals和hashCode方法。

对于特定的类加载器和特定的一组接口来说，只能有一个代理类，也就是说如果 使用同一个类加载器和接口
调用 再次newProxyInstance方法的话只能得到现一个类的两个实例。如：
	Object proxy1 = Proxy.newProxyInstance(null, new Class[] { Comparable.class }, handler);
	Object proxy2 = Proxy.newProxyInstance(null, new Class[] { Comparable.class }, handler);
proxy1和proxy2是同一个类的两个对象。

也可以使用getProxyClass方法获得这个类。
	Class proxyClass=Proxy.getProxyClass(null,interfaces);

代理类一定是public和final的。

可以使用Proxy类中的isProxyClass方法检测一个特定的Class对象是否代表一个代理类。
